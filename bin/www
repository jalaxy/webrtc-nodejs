#!/usr/bin/env node

/**
 * Create datebase pool
 */

const mysql = require('mysql');

const db_pool = mysql.createPool({
    connectionLimit: 128,
    host: 'localhost',
    user: 'root',
    password: 'root123',
    database: 'meetings_db'
});

/**
 * Module dependencies.
 */

var app = require('../app')(db_pool);
var wsserver = require('../wss')
var debug = require('debug')('nodejs:server');
var https = require('https');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
var wsport = 3001;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = https.createServer({
    key: fs.readFileSync('sslcert/server.key', 'utf8'),
    cert: fs.readFileSync('sslcert/server.crt', 'utf8')
}, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
wsserver.listen(wsport);
console.log(`HTTPS server listening on port ${port}`);
console.log(`HTTPS server listening on port ${wsport}`);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * Process exit
 */

function onClose() {
    console.log('')
    db_pool.end();
    console.log('Database pool closed.');
    server.close();
    wsserver.close();
    console.log('HTTPS and WSS server exited.');
    process.exit();
}

process.on('SIGINT', onClose);
process.on('SIGTERM', onClose);
